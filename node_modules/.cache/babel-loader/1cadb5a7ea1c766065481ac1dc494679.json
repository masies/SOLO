{"ast":null,"code":"import _classCallCheck from \"/Users/MS/Desktop/uni/stage/tiascolto/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/MS/Desktop/uni/stage/tiascolto/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/MS/Desktop/uni/stage/tiascolto/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/MS/Desktop/uni/stage/tiascolto/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/MS/Desktop/uni/stage/tiascolto/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/MS/Desktop/uni/stage/tiascolto/src/components/keyboard/Keyboard.js\";\nimport React from 'react';\nimport { Piano, MidiNumbers } from 'react-piano';\nimport 'react-piano/dist/styles.css';\nimport classNames from 'classnames';\nimport './Keyboard';\nimport DimensionsProvider from './DimensionsProvider';\nimport SoundfontProvider from './SoundfontProvider';\nimport PianoConfig from './PianoConfig';\nvar audioContext = new (window.AudioContext || window.webkitAudioContext)();\nvar soundfontHostname = 'https://d1pzp51pvbm36p.cloudfront.net';\nvar instrument_list = [\"random\", \"accordion\", // F2 - A6\n\"acoustic_grand_piano\", // da nominare come: gran piano \n\"acoustic_guitar_nylon\", // da nominare come: classical guitar // E2 - B6\n\"acoustic_guitar_steel\", // da nominare come: acoustic guitar // E2 - B6\n\"alto_sax\", // C#3 - G#5 \n\"banjo\", // C3 - A4\n\"baritone_sax\", // C#2 - G#4\n\"bassoon\", \"celesta\", // C3 - F8\n\"cello\", \"church_organ\", // C1 - C7\n\"clarinet\", \"contrabass\", \"distortion_guitar\", // E2 - B6\n\"electric_guitar_clean\", // E2 - B6\n\"electric_piano_1\", // da nominare come: electric piano // stesso range del piano\n\"english_horn\", // E3 - B5\n\"flute\", \"french_horn\", // da nominare come: horn \n\"glockenspiel\", // F5 - D8\n\"lead_1_square\", // full  range\n\"lead_2_sawtooth\", // full  range\n\"marimba\", // C2 - C7\n\"oboe\", \"piccolo\", // D5 - C8\n\"recorder\", // F3 - G6\n\"soprano_sax\", // G#3 - D#6\n\"tenor_sax\", //G#2 - D#6\n\"timpani\", // B1 - C4\n\"trombone\", \"trumpet\", \"tuba\", \"tubular_bells\", // F3 - F5\n\"vibraphone\", \"viola\", \"violin\", \"xylophone\" // F4 - C8\n];\n\nvar Keyboard =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Keyboard, _React$Component);\n\n  function Keyboard(props) {\n    var _this;\n\n    _classCallCheck(this, Keyboard);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Keyboard).call(this, props));\n    _this.state = {\n      song: [],\n      activeNotesIndex: 0,\n      isPlaying: false,\n      config: {\n        duration: 3,\n        instrumentName: 'acoustic_grand_piano',\n        noteRange: {\n          first: MidiNumbers.fromNote('c1'),\n          last: MidiNumbers.fromNote('b7')\n        }\n      }\n    };\n\n    _this.setPlaying = function (value) {\n      if (value) {\n        _this.giveMeASong();\n      }\n\n      _this.setState({\n        isPlaying: value\n      });\n    };\n\n    _this.playbackIntervalFn = null;\n    return _this;\n  }\n\n  _createClass(Keyboard, [{\n    key: \"randomInstrument\",\n    value: function randomInstrument() {\n      return instrument_list[Math.floor(Math.random() * instrument_list.length)];\n    }\n  }, {\n    key: \"giveMeASong\",\n    value: function giveMeASong() {\n      var newsong = [];\n      var last = this.state.config.noteRange.last;\n      var first = this.state.config.noteRange.first;\n\n      for (var i = 0; i < 10; i++) {\n        var note_to_push = Math.floor(Math.random() * (last - first) + first); //duration selected\n\n        if (this.state.config.duration == 6) {\n          for (var j = 0; j < Math.floor(Math.random() * 5); j++) {\n            newsong.push([note_to_push]);\n          }\n        } else {\n          for (var k = 0; k < this.state.config.duration; k++) {\n            newsong.push([note_to_push]);\n          }\n        } //add random pause\n\n\n        if (Math.random() * (2 - 0) + 0 > 1) {\n          newsong.push([]);\n        }\n      }\n\n      this.setState({\n        song: newsong\n      });\n    }\n  }, {\n    key: \"restart\",\n    value: function restart() {\n      this.setState({\n        activeNotesIndex: 0\n      });\n      this.setState({\n        isPlaying: true\n      });\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.giveMeASong();\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState) {\n      var _this2 = this;\n\n      if (prevState.isPlaying !== this.state.isPlaying) {\n        if (this.state.isPlaying) {\n          this.playbackIntervalFn = setInterval(function () {\n            _this2.setState({\n              activeNotesIndex: (_this2.state.activeNotesIndex + 1) % _this2.state.song.length\n            });\n          }, 200);\n        } else {\n          clearInterval(this.playbackIntervalFn);\n          this.setState({\n            activeNotesIndex: 0\n          });\n        }\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      return React.createElement(SoundfontProvider, {\n        audioContext: audioContext,\n        instrumentName: this.state.config.instrumentName == 'random' ? this.randomInstrument : this.state.config.instrumentName,\n        hostname: soundfontHostname,\n        render: function render(_ref) {\n          var isLoading = _ref.isLoading,\n              playNote = _ref.playNote,\n              stopNote = _ref.stopNote;\n          return React.createElement(\"div\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 149\n            },\n            __self: this\n          }, React.createElement(DimensionsProvider, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 150\n            },\n            __self: this\n          }, function (_ref2) {\n            var containerWidth = _ref2.containerWidth;\n            return React.createElement(Piano, {\n              activeNotes: _this3.state.isPlaying ? _this3.state.song[_this3.state.activeNotesIndex] : [],\n              noteRange: _this3.state.config.noteRange,\n              playNote: playNote,\n              stopNote: stopNote,\n              disabled: isLoading,\n              width: containerWidth,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 152\n              },\n              __self: this\n            });\n          }), React.createElement(\"div\", {\n            className: \"text-center\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 164\n            },\n            __self: this\n          }, React.createElement(\"div\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 165\n            },\n            __self: this\n          }, React.createElement(\"button\", {\n            className: classNames('btn', {\n              'btn-outline-info': !_this3.state.isPlaying,\n              'btn-outline-danger': _this3.state.isPlaying\n            }),\n            onClick: function onClick() {\n              return _this3.setPlaying(!_this3.state.isPlaying);\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 166\n            },\n            __self: this\n          }, _this3.state.isPlaying ? 'Stop' : 'Start'), React.createElement(\"button\", {\n            className: classNames('btn', {\n              'btn-outline-info': !_this3.state.isPlaying,\n              'btn-outline-danger': _this3.state.isPlaying\n            }),\n            onClick: function onClick() {\n              return _this3.restart();\n            },\n            disabled: _this3.state.isPlaying,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 176\n            },\n            __self: this\n          }, 'restart'))), React.createElement(PianoConfig, {\n            config: _this3.state.config,\n            setConfig: function setConfig(config) {\n              _this3.setState({\n                config: Object.assign({}, _this3.state.config, config)\n              });\n            },\n            instrumentList: instrument_list || [_this3.state.config.instrumentName],\n            song: _this3.song,\n            duration: _this3.state.config.duration,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 189\n            },\n            __self: this\n          }));\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 144\n        },\n        __self: this\n      });\n    }\n  }]);\n\n  return Keyboard;\n}(React.Component);\n\nexport default Keyboard;","map":{"version":3,"sources":["/Users/MS/Desktop/uni/stage/tiascolto/src/components/keyboard/Keyboard.js"],"names":["React","Piano","MidiNumbers","classNames","DimensionsProvider","SoundfontProvider","PianoConfig","audioContext","window","AudioContext","webkitAudioContext","soundfontHostname","instrument_list","Keyboard","props","state","song","activeNotesIndex","isPlaying","config","duration","instrumentName","noteRange","first","fromNote","last","setPlaying","value","giveMeASong","setState","playbackIntervalFn","Math","floor","random","length","newsong","i","note_to_push","j","push","k","prevProps","prevState","setInterval","clearInterval","randomInstrument","isLoading","playNote","stopNote","containerWidth","restart","Object","assign","Component"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Piano, MidiNumbers } from 'react-piano';\nimport 'react-piano/dist/styles.css';\nimport classNames from 'classnames';\nimport './Keyboard'\n\nimport DimensionsProvider from './DimensionsProvider';\nimport SoundfontProvider from './SoundfontProvider';\n\nimport PianoConfig from './PianoConfig';\n\n\nconst audioContext = new (window.AudioContext || window.webkitAudioContext)();\nconst soundfontHostname = 'https://d1pzp51pvbm36p.cloudfront.net';\n\nconst instrument_list= [\n  \"random\",\n  \"accordion\", // F2 - A6\n  \"acoustic_grand_piano\", // da nominare come: gran piano \n  \"acoustic_guitar_nylon\", // da nominare come: classical guitar // E2 - B6\n  \"acoustic_guitar_steel\", // da nominare come: acoustic guitar // E2 - B6\n  \"alto_sax\", // C#3 - G#5 \n  \"banjo\", // C3 - A4\n  \"baritone_sax\", // C#2 - G#4\n  \"bassoon\",\n  \"celesta\", // C3 - F8\n  \"cello\",      \n  \"church_organ\", // C1 - C7\n  \"clarinet\",\n  \"contrabass\",\n  \"distortion_guitar\", // E2 - B6\n  \"electric_guitar_clean\", // E2 - B6\n  \"electric_piano_1\", // da nominare come: electric piano // stesso range del piano\n  \"english_horn\", // E3 - B5\n  \"flute\",\n  \"french_horn\", // da nominare come: horn \n  \"glockenspiel\", // F5 - D8\n  \"lead_1_square\", // full  range\n  \"lead_2_sawtooth\", // full  range\n  \"marimba\",// C2 - C7\n  \"oboe\",\n  \"piccolo\", // D5 - C8\n  \"recorder\", // F3 - G6\n  \"soprano_sax\", // G#3 - D#6\n  \"tenor_sax\", //G#2 - D#6\n  \"timpani\", // B1 - C4\n  \"trombone\",\n  \"trumpet\",\n  \"tuba\",\n  \"tubular_bells\", // F3 - F5\n  \"vibraphone\",\n  \"viola\",\n  \"violin\",\n  \"xylophone\" // F4 - C8\n] \n\n\nclass Keyboard extends React.Component {\n\n  state = {\n    song: [],\n    activeNotesIndex: 0,\n    isPlaying: false,\n    config: {\n      duration : 3,\n      instrumentName: 'acoustic_grand_piano',\n      noteRange: {\n        first: MidiNumbers.fromNote('c1'),\n        last: MidiNumbers.fromNote('b7'),\n      },\n    },\n  };\n\n  constructor(props) {\n    super(props);\n    this.playbackIntervalFn = null;\n  }\n\n  randomInstrument(){\n    return instrument_list[Math.floor(Math.random()*instrument_list.length)];\n  }\n\n  giveMeASong () {\n    let newsong = [];\n    let last = this.state.config.noteRange.last;\n    let first = this.state.config.noteRange.first;\n    for (var i = 0; i < 10; i++) {\n      let note_to_push = Math.floor(Math.random() * (last - first) + first)\n      //duration selected\n      if (this.state.config.duration == 6) {\n        for (var j = 0; j < Math.floor(Math.random() * 5); j++) {\n          newsong.push([note_to_push]);\n        }\n      }else {\n        for (var k = 0; k < this.state.config.duration; k++) {\n          newsong.push([note_to_push]);\n        }\n      }\n      //add random pause\n      if (Math.random() * (2 - 0) + 0 > 1){\n        newsong.push([]);\n      }\n    }\n    this.setState({song: newsong})\n  }\n\n  \n  restart(){\n    this.setState({\n          activeNotesIndex: 0,\n        });\n    this.setState({ isPlaying: true });\n  }\n\n  setPlaying = (value) => {\n    if (value) { this.giveMeASong(); }\n    this.setState({ isPlaying: value });\n  };\n\n  componentDidMount(){\n    this.giveMeASong();\n  }\n\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevState.isPlaying !== this.state.isPlaying) {\n      if (this.state.isPlaying) {\n        this.playbackIntervalFn = setInterval(() => {\n          this.setState({\n            activeNotesIndex: (this.state.activeNotesIndex + 1) % this.state.song.length,\n          });\n        }, 200);\n      } else {\n        clearInterval(this.playbackIntervalFn);\n        this.setState({\n          activeNotesIndex: 0,\n        });\n      }\n    }\n  }\n\n  render() {\n    return (\n      <SoundfontProvider\n        audioContext={audioContext}\n        instrumentName={this.state.config.instrumentName == 'random' ? this.randomInstrument : this.state.config.instrumentName}\n        hostname={soundfontHostname}\n        render={({ isLoading, playNote, stopNote }) => (\n        <div>\n          <DimensionsProvider >\n              {({ containerWidth }) => (\n                <Piano\n                  activeNotes={\n                      this.state.isPlaying ? this.state.song[this.state.activeNotesIndex] : []\n                    }\n                  noteRange={this.state.config.noteRange}\n                  playNote={playNote}\n                  stopNote={stopNote}\n                  disabled={isLoading}\n                  width={containerWidth}\n                />\n              )}\n          </DimensionsProvider>\n          <div className=\"text-center\">\n          <div>\n            <button\n              className={classNames('btn', {\n                'btn-outline-info': !this.state.isPlaying,\n                'btn-outline-danger': this.state.isPlaying,\n              })}\n              onClick={() => this.setPlaying(!this.state.isPlaying)}\n            >\n              {this.state.isPlaying ? 'Stop' : 'Start'}\n            </button>\n\n            <button\n              className={classNames('btn', {\n                'btn-outline-info': !this.state.isPlaying,\n                'btn-outline-danger': this.state.isPlaying,\n              })}\n              onClick={() => this.restart()}\n              disabled={this.state.isPlaying}\n            >\n              {'restart' }\n            </button>\n\n          </div>\n        </div>\n          <PianoConfig\n              config={this.state.config}\n              setConfig={(config) => {\n                this.setState({\n                  config: Object.assign({}, this.state.config, config),\n                });\n              }}\n              instrumentList={instrument_list || [this.state.config.instrumentName]}\n              song={this.song}\n              duration = {this.state.config.duration}\n          />\n        </div>\n        )}\n      />\n       \n    );\n  }\n}\n\nexport default Keyboard;\n\n"]},"metadata":{},"sourceType":"module"}