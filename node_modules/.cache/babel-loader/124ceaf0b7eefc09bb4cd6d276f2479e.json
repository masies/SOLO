{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"/Users/MS/Desktop/Projects/SOLO/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/MS/Desktop/Projects/SOLO/node_modules/@babel/runtime/helpers/createClass\");\n\nvar chalk = require('chalk');\n\nvar cliCursor = require('cli-cursor');\n\nvar cliSpinners = require('cli-spinners');\n\nvar logSymbols = require('log-symbols');\n\nvar stripAnsi = require('strip-ansi');\n\nvar wcwidth = require('wcwidth');\n\nvar TEXT = Symbol('text');\n\nvar Ora =\n/*#__PURE__*/\nfunction () {\n  function Ora(options) {\n    _classCallCheck(this, Ora);\n\n    if (typeof options === 'string') {\n      options = {\n        text: options\n      };\n    }\n\n    this.options = Object.assign({\n      text: '',\n      color: 'cyan',\n      stream: process.stderr\n    }, options);\n    this.spinner = this.options.spinner;\n    this.color = this.options.color;\n    this.hideCursor = this.options.hideCursor !== false;\n    this.interval = this.options.interval || this.spinner.interval || 100;\n    this.stream = this.options.stream;\n    this.id = null;\n    this.isEnabled = typeof this.options.isEnabled === 'boolean' ? this.options.isEnabled : this.stream && this.stream.isTTY && !process.env.CI; // Set *after* `this.stream`\n\n    this.text = this.options.text;\n    this.linesToClear = 0;\n    this.indent = this.options.indent;\n  }\n\n  _createClass(Ora, [{\n    key: \"frame\",\n    value: function frame() {\n      var frames = this.spinner.frames;\n      var frame = frames[this.frameIndex];\n\n      if (this.color) {\n        frame = chalk[this.color](frame);\n      }\n\n      this.frameIndex = ++this.frameIndex % frames.length;\n      return frame + ' ' + this.text;\n    }\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      if (!this.isEnabled || !this.stream.isTTY) {\n        return this;\n      }\n\n      for (var i = 0; i < this.linesToClear; i++) {\n        if (i > 0) {\n          this.stream.moveCursor(0, -1);\n        }\n\n        this.stream.clearLine();\n        this.stream.cursorTo(this.indent);\n      }\n\n      this.linesToClear = 0;\n      return this;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      this.clear();\n      this.stream.write(this.frame());\n      this.linesToClear = this.lineCount;\n      return this;\n    }\n  }, {\n    key: \"start\",\n    value: function start(text) {\n      if (text) {\n        this.text = text;\n      }\n\n      if (!this.isEnabled) {\n        this.stream.write(\"- \".concat(this.text, \"\\n\"));\n        return this;\n      }\n\n      if (this.isSpinning) {\n        return this;\n      }\n\n      if (this.hideCursor) {\n        cliCursor.hide(this.stream);\n      }\n\n      this.render();\n      this.id = setInterval(this.render.bind(this), this.interval);\n      return this;\n    }\n  }, {\n    key: \"stop\",\n    value: function stop() {\n      if (!this.isEnabled) {\n        return this;\n      }\n\n      clearInterval(this.id);\n      this.id = null;\n      this.frameIndex = 0;\n      this.clear();\n\n      if (this.hideCursor) {\n        cliCursor.show(this.stream);\n      }\n\n      return this;\n    }\n  }, {\n    key: \"succeed\",\n    value: function succeed(text) {\n      return this.stopAndPersist({\n        symbol: logSymbols.success,\n        text: text\n      });\n    }\n  }, {\n    key: \"fail\",\n    value: function fail(text) {\n      return this.stopAndPersist({\n        symbol: logSymbols.error,\n        text: text\n      });\n    }\n  }, {\n    key: \"warn\",\n    value: function warn(text) {\n      return this.stopAndPersist({\n        symbol: logSymbols.warning,\n        text: text\n      });\n    }\n  }, {\n    key: \"info\",\n    value: function info(text) {\n      return this.stopAndPersist({\n        symbol: logSymbols.info,\n        text: text\n      });\n    }\n  }, {\n    key: \"stopAndPersist\",\n    value: function stopAndPersist() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      this.stop();\n      this.stream.write(\"\".concat(options.symbol || ' ', \" \").concat(options.text || this.text, \"\\n\"));\n      return this;\n    }\n  }, {\n    key: \"indent\",\n    get: function get() {\n      return this._indent;\n    },\n    set: function set() {\n      var indent = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n\n      if (!(indent >= 0 && Number.isInteger(indent))) {\n        throw new Error('The `indent` option must be an integer from 0 and up');\n      }\n\n      this._indent = indent;\n    }\n  }, {\n    key: \"spinner\",\n    get: function get() {\n      return this._spinner;\n    },\n    set: function set(spinner) {\n      this.frameIndex = 0;\n\n      if (typeof spinner === 'object') {\n        if (spinner.frames === undefined) {\n          throw new Error('The given spinner must have a `frames` property');\n        }\n\n        this._spinner = spinner;\n      } else if (process.platform === 'win32') {\n        this._spinner = cliSpinners.line;\n      } else if (spinner === undefined) {\n        // Set default spinner\n        this._spinner = cliSpinners.dots;\n      } else if (cliSpinners[spinner]) {\n        this._spinner = cliSpinners[spinner];\n      } else {\n        throw new Error(\"There is no built-in spinner named '\".concat(spinner, \"'. See https://github.com/sindresorhus/cli-spinners/blob/master/spinners.json for a full list.\"));\n      }\n    }\n  }, {\n    key: \"text\",\n    get: function get() {\n      return this[TEXT];\n    },\n    set: function set(value) {\n      this[TEXT] = value;\n      var columns = this.stream.columns || 80;\n      this.lineCount = stripAnsi('--' + value).split('\\n').reduce(function (count, line) {\n        return count + Math.max(1, Math.ceil(wcwidth(line) / columns));\n      }, 0);\n    }\n  }, {\n    key: \"isSpinning\",\n    get: function get() {\n      return this.id !== null;\n    }\n  }]);\n\n  return Ora;\n}();\n\nvar oraFactory = function oraFactory(opts) {\n  return new Ora(opts);\n};\n\nmodule.exports = oraFactory;\nmodule.exports.default = oraFactory;\n\nmodule.exports.promise = function (action, options) {\n  if (typeof action.then !== 'function') {\n    throw new TypeError('Parameter `action` must be a Promise');\n  }\n\n  var spinner = new Ora(options);\n  spinner.start();\n  action.then(function () {\n    spinner.succeed();\n  }, function () {\n    spinner.fail();\n  });\n  return spinner;\n};","map":null,"metadata":{},"sourceType":"script"}