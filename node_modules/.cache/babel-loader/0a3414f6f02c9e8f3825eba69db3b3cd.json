{"ast":null,"code":"import _defineProperty from \"/Users/MS/Desktop/uni/stage/tiascolto/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"/Users/MS/Desktop/uni/stage/tiascolto/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/MS/Desktop/uni/stage/tiascolto/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/MS/Desktop/uni/stage/tiascolto/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/MS/Desktop/uni/stage/tiascolto/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/MS/Desktop/uni/stage/tiascolto/node_modules/@babel/runtime/helpers/esm/inherits\";\n// See https://github.com/danigb/soundfont-player\n// for more documentation on prop options.\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Soundfont from 'soundfont-player';\n\nvar SoundfontProvider =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(SoundfontProvider, _React$Component);\n\n  function SoundfontProvider(props) {\n    var _this;\n\n    _classCallCheck(this, SoundfontProvider);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(SoundfontProvider).call(this, props));\n\n    _this.loadInstrument = function (instrumentName) {\n      // Re-trigger loading state\n      _this.setState({\n        instrument: null\n      });\n\n      Soundfont.instrument(_this.props.audioContext, instrumentName, {\n        format: _this.props.format,\n        soundfont: _this.props.soundfont,\n        nameToUrl: function nameToUrl(name, soundfont, format) {\n          return \"\".concat(_this.props.hostname, \"/\").concat(soundfont, \"/\").concat(name, \"-\").concat(format, \".js\");\n        }\n      }).then(function (instrument) {\n        _this.setState({\n          instrument: instrument\n        });\n      });\n    };\n\n    _this.playNote = function (midiNumber) {\n      _this.resumeAudio().then(function () {\n        var audioNode = _this.state.instrument.play(midiNumber);\n\n        console.log(audioNode);\n\n        _this.setState({\n          activeAudioNodes: Object.assign({}, _this.state.activeAudioNodes, _defineProperty({}, midiNumber, audioNode))\n        });\n      });\n    };\n\n    _this.stopNote = function (midiNumber) {\n      _this.resumeAudio().then(function () {\n        if (!_this.state.activeAudioNodes[midiNumber]) {\n          return;\n        }\n\n        var audioNode = _this.state.activeAudioNodes[midiNumber];\n        audioNode.stop();\n\n        _this.setState({\n          activeAudioNodes: Object.assign({}, _this.state.activeAudioNodes, _defineProperty({}, midiNumber, null))\n        });\n      });\n    };\n\n    _this.resumeAudio = function () {\n      if (_this.props.audioContext.state === 'suspended') {\n        return _this.props.audioContext.resume();\n      } else {\n        return Promise.resolve();\n      }\n    };\n\n    _this.stopAllNotes = function () {\n      _this.props.audioContext.resume().then(function () {\n        var activeAudioNodes = Object.values(_this.state.activeAudioNodes);\n        activeAudioNodes.forEach(function (node) {\n          if (node) {\n            node.stop();\n          }\n        });\n\n        _this.setState({\n          activeAudioNodes: {}\n        });\n      });\n    };\n\n    _this.state = {\n      activeAudioNodes: {},\n      instrument: null\n    };\n    return _this;\n  }\n\n  _createClass(SoundfontProvider, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.loadInstrument(this.props.instrumentName);\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState) {\n      if (prevProps.instrumentName !== this.props.instrumentName) {\n        this.loadInstrument(this.props.instrumentName);\n      }\n\n      if (prevState.instrument !== this.state.instrument) {\n        if (!this.props.onLoad) {\n          return;\n        }\n\n        this.props.onLoad({\n          playNote: this.playNote,\n          stopNote: this.stopNote,\n          stopAllNotes: this.stopAllNotes\n        });\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return this.props.render ? this.props.render({\n        isLoading: !this.state.instrument,\n        playNote: this.playNote,\n        stopNote: this.stopNote,\n        stopAllNotes: this.stopAllNotes\n      }) : null;\n    }\n  }]);\n\n  return SoundfontProvider;\n}(React.Component);\n\nSoundfontProvider.propTypes = {\n  instrumentName: PropTypes.string.isRequired,\n  hostname: PropTypes.string.isRequired,\n  format: PropTypes.oneOf(['mp3', 'ogg']),\n  soundfont: PropTypes.oneOf(['MusyngKite', 'FluidR3_GM']),\n  audioContext: PropTypes.instanceOf(window.AudioContext),\n  onLoad: PropTypes.func,\n  render: PropTypes.func\n};\nSoundfontProvider.defaultProps = {\n  format: 'mp3',\n  soundfont: 'MusyngKite',\n  instrumentName: 'acoustic_grand_piano'\n};\nexport default SoundfontProvider;","map":{"version":3,"sources":["/Users/MS/Desktop/uni/stage/tiascolto/src/components/keyboard/SoundfontProvider.js"],"names":["React","PropTypes","Soundfont","SoundfontProvider","props","loadInstrument","instrumentName","setState","instrument","audioContext","format","soundfont","nameToUrl","name","hostname","then","playNote","midiNumber","resumeAudio","audioNode","state","play","console","log","activeAudioNodes","Object","assign","stopNote","stop","resume","Promise","resolve","stopAllNotes","values","forEach","node","prevProps","prevState","onLoad","render","isLoading","Component","propTypes","string","isRequired","oneOf","instanceOf","window","AudioContext","func","defaultProps"],"mappings":"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","sourcesContent":["// See https://github.com/danigb/soundfont-player\n// for more documentation on prop options.\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Soundfont from 'soundfont-player';\n\nclass SoundfontProvider extends React.Component {\n  static propTypes = {\n    instrumentName: PropTypes.string.isRequired,\n    hostname: PropTypes.string.isRequired,\n    format: PropTypes.oneOf(['mp3', 'ogg']),\n    soundfont: PropTypes.oneOf(['MusyngKite', 'FluidR3_GM']),\n    audioContext: PropTypes.instanceOf(window.AudioContext),\n    onLoad: PropTypes.func,\n    render: PropTypes.func,\n  };\n\n  static defaultProps = {\n    format: 'mp3',\n    soundfont: 'MusyngKite',\n    instrumentName: 'acoustic_grand_piano',\n  };\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      activeAudioNodes: {},\n      instrument: null,\n    };\n  }\n\n  componentDidMount() {\n    this.loadInstrument(this.props.instrumentName);\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevProps.instrumentName !== this.props.instrumentName) {\n      this.loadInstrument(this.props.instrumentName);\n    }\n\n    if (prevState.instrument !== this.state.instrument) {\n      if (!this.props.onLoad) {\n        return;\n      }\n      this.props.onLoad({\n        playNote: this.playNote,\n        stopNote: this.stopNote,\n        stopAllNotes: this.stopAllNotes,\n      });\n    }\n  }\n\n  loadInstrument = (instrumentName) => {\n    // Re-trigger loading state\n    this.setState({\n      instrument: null,\n    });\n    Soundfont.instrument(this.props.audioContext, instrumentName, {\n      format: this.props.format,\n      soundfont: this.props.soundfont,\n      nameToUrl: (name, soundfont, format) => {\n        return `${this.props.hostname}/${soundfont}/${name}-${format}.js`;\n      },\n    }).then((instrument) => {\n      this.setState({\n        instrument,\n      });\n    });\n  };\n\n  playNote = (midiNumber) => {\n    this.resumeAudio().then(() => {\n      const audioNode = this.state.instrument.play(midiNumber);\n      console.log(audioNode)\n      this.setState({\n        activeAudioNodes: Object.assign({}, this.state.activeAudioNodes, {\n          [midiNumber]: audioNode,\n        }),\n      });\n    });\n  };\n\n  stopNote = (midiNumber) => {\n    this.resumeAudio().then(() => {\n      if (!this.state.activeAudioNodes[midiNumber]) {\n        return;\n      }\n      const audioNode = this.state.activeAudioNodes[midiNumber];\n      audioNode.stop();\n      this.setState({\n        activeAudioNodes: Object.assign({}, this.state.activeAudioNodes, { [midiNumber]: null }),\n      });\n    });\n  };\n\n  resumeAudio = () => {\n    if (this.props.audioContext.state === 'suspended') {\n      return this.props.audioContext.resume();\n    } else {\n      return Promise.resolve();\n    }\n  };\n\n  // Clear any residual notes that don't get called with stopNote\n  stopAllNotes = () => {\n    this.props.audioContext.resume().then(() => {\n      const activeAudioNodes = Object.values(this.state.activeAudioNodes);\n      activeAudioNodes.forEach((node) => {\n        if (node) {\n          node.stop();\n        }\n      });\n      this.setState({\n        activeAudioNodes: {},\n      });\n    });\n  };\n\n  render() {\n    return this.props.render\n      ? this.props.render({\n          isLoading: !this.state.instrument,\n          playNote: this.playNote,\n          stopNote: this.stopNote,\n          stopAllNotes: this.stopAllNotes,\n        })\n      : null;\n  }\n}\n\nexport default SoundfontProvider;\n"]},"metadata":{},"sourceType":"module"}